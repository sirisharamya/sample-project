Q1: How will you set up the project for version control and push it to GitHub?
Ans:
1. Initialize the project with Git using the command:
 ```bash
 git init
2. Link the local project to a remote GitHub repository:
 git remote add origin <repository_url>
3. Add files to the staging area:
 git add .
4. Commit the changes with an appropriate message:
 git commit -m "Initial commit"
5. Push the changes to GitHub:
  ->If the main branch is used:
     git push -u origin main
  ->If the master branch is used:
     git push -u origin master


Q2: What steps will you take to create, push, and manage branches effectively?
Ans:
1. Create a new branch for the feature development:
 git checkout -b feature/update-readme
2. Push the new branch to GitHub for collaboration and review:
 git push -u origin feature/update-readme
3. Make changes in the new branch (e.g., update the README.md file).
4. Commit the changes:
 git add .
 git commit -m "Add project introduction to README"
5. Push the changes to the remote feature branch:
 git push origin feature/update-readme


Q3: How will you ensure the changes in the feature branch are merged into the main branch?
Ans:
1. Switch back to the main branch:
 git checkout main
2. Merge the changes from the feature branch into main:
 git merge feature/update-readme
3. Push the merged changes to GitHub:
 git push origin main


Q4: What commands will you use to clean up unused branches locally and remotely?
Ans:
1. Delete the branch locally after it has been merged:
 git branch -d feature/update-readme
2. Delete the branch remotely:
 git push origin --delete feature/update-readme
3. Verify that the branch is deleted locally and remotely:
     ->List local branches:
        git branch
     ->List remote branches:
        git branch -r





 
